library(dplyr)
library(readr)
library(igraph)

# Lecture et nettoyage
df <- read_delim("qualite-de-lair-dans-le-reseau-de-transport-francilien.csv",
                 delim = ";", locale = locale(encoding = "UTF-8"))

# Filtrage et encodage pollution
df_metro <- df %>%
  filter(grepl("Métro", `Nom de la ligne`)) %>%
  select(`Nom de la Station`, `Nom de la ligne`, `Niveau de pollution`) %>%
  mutate(pollution_score = case_when(
    grepl("FAIBLE", `Niveau de pollution`, ignore.case = TRUE) ~ 1,
    grepl("MOYENNE", `Niveau de pollution`, ignore.case = TRUE) ~ 2,
    grepl("FORTE", `Niveau de pollution`, ignore.case = TRUE) ~ 3,
    TRUE ~ 2
  )) %>%
  distinct()

# Création des connexions
edges_df <- df_metro %>%
  group_by(`Nom de la ligne`) %>%
  arrange(`Nom de la Station`) %>%
  mutate(station1 = lag(`Nom de la Station`),
         station2 = `Nom de la Station`) %>%
  filter(!is.na(station1)) %>%
  select(station1, station2)

# Créer le graphe
g <- graph_from_data_frame(edges_df, directed = TRUE)

# Ajouter la pollution aux sommets (stations)
station_pollution <- df_metro %>%
  distinct(`Nom de la Station`, pollution_score)

V(g)$pollution <- station_pollution$pollution_score[match(V(g)$name, station_pollution$`Nom de la Station`)]

# Paramètres d’entrée
station_depart <- "Nation"
station_arrivee <- "Châtelet"
seuil <- 2  # ex : max = moyenne pollution

# Filtrer le graphe : garder que les sommets sous le seuil
noeuds_valides <- V(g)[V(g)$pollution <= seuil]
g_filtré <- induced_subgraph(g, vids = noeuds_valides)

# Vérifier si les 2 stations sont encore là
if (!(station_depart %in% V(g_filtré)$name) || !(station_arrivee %in% V(g_filtré)$name)) {
  print(" Chemin impossible : une des stations est au-dessus du seuil.")
} else if (suppressWarnings(!are.connected(g_filtré, station_depart, station_arrivee))) {
  print(" Pas de chemin entre les stations avec la contrainte pollution.")
} else {
  print(" Un chemin existe entre les deux stations sous le seuil de pollution.")
}
